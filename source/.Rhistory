if(highpt[2]==1){ypos = cypos - 1 }
if(highpt[2]==2){ypos = cypos }
if(highpt[2]==3){ypos = cypos + 1 }
}
#record new position
mvmt = c(mvmt, xpos, ypos)
#check to see if individual is at peak; if yes individual remains in same position
if(land[xpos,ypos]>=elevation[2]){
#fill out remaining positions
mvmt=c(mvmt, rep(c(xpos, ypos), (nsteps-((length(mvmt)/2)-1))))
#exit loop
break
}
#check to see if individual is at edge of landscape; if yes individual remains in same position
if(xpos>=(landscape-1) | ypos>=(landscape-1) | xpos<=1 | ypos<=1){
#fill out remaining positions
mvmt=c(mvmt, rep(c(xpos, ypos), (nsteps-((length(mvmt)/2)-1))))
#exit loop
break
}
}
return(mvmt)
}
setwd("~/GitHub/ABM_Hilltopping/")
#to make sure it is the right place you should do session then set up working directory
directory = getwd()
outdir    = paste(directory,"/output/", sep="")
source(paste(directory, "/source/FunctionSourcer.R", sep =''))
#parameters
elevation.V = c(0, 400)           #peak elevation min and max
source(paste(directory, "/source/FunctionSourcer.R", sep =''))
MoveIndv=function(indv, land, move, nsteps, elevation, landscape){
mvmt = indv[1,1:2] #x==1, y==2
for(s in 1:nsteps){
cxpos = mvmt[(length(mvmt)-1)]
cypos = mvmt[length(mvmt)]
#determine if indv will move randomly or will move to higher elevation
movehigh = sample(x=c(0,1), size=1, prob=c((1-move), move))
#random movement to adjacent cell/patch
if(movehigh==0){
xpos = sample(c(-1,0,1), 1) + cxpos
ypos = sample(c(-1,0,1), 1) + cypos
}
#move to higher elevation, added the 'else' here instead of 'if'
if(movehigh==1){
#find highest elevation cell
highpt = which(land[(cxpos-1):(cxpos+1), (cypos-1):(cypos+1)] == max(land[(cxpos-1):(cxpos+1), (cypos-1):(cypos+1)]), arr.ind = TRUE)
#calculate new position (x and y values)
if(highpt[1]==1){xpos = cxpos - 1 }
if(highpt[1]==2){xpos = cxpos }
if(highpt[1]==3){xpos = cxpos + 1 }
if(highpt[2]==1){ypos = cypos - 1 }
if(highpt[2]==2){ypos = cypos }
if(highpt[2]==3){ypos = cypos + 1 }
}
#record new position
mvmt = c(mvmt, xpos, ypos)
#check to see if individual is at peak; if yes individual remains in same position
if(land[xpos,ypos]>=elevation[2]){
#fill out remaining positions
mvmt=c(mvmt, rep(c(xpos, ypos), (nsteps-((length(mvmt)/2)-1))))
#exit loop
break
}
#check to see if individual is at edge of landscape; if yes individual remains in same position
if(xpos>=(landscape-1) | ypos>=(landscape-1) | xpos<=1 | ypos<=1){
#fill out remaining positions
mvmt=c(mvmt, rep(c(xpos, ypos), (nsteps-((length(mvmt)/2)-1))))
#exit loop
break
}
}
return(mvmt)
}
MoveIndv=function(indv, land, move, nsteps, elevation, landscape){
mvmt = indv[1,1:2] #x==1, y==2
for(s in 1:nsteps){
cxpos = mvmt[(length(mvmt)-1)]
cypos = mvmt[length(mvmt)]
#determine if indv will move randomly or will move to higher elevation
movehigh = sample(x=c(0,1), size=1, prob=c((1-move), move))
#random movement to adjacent cell/patch
if(movehigh==0){
xpos = sample(c(-1,0,1), 1) + cxpos
ypos = sample(c(-1,0,1), 1) + cypos
}
#move to higher elevation, added the 'else' here instead of 'if'
if(movehigh==1){
#find highest elevation cell
highpt = which(land[(cxpos-1):(cxpos+1), (cypos-1):(cypos+1)] == max(land[(cxpos-1):(cxpos+1), (cypos-1):(cypos+1)]), arr.ind = TRUE)
#calculate new position (x and y values)
if(highpt[1]==1){xpos = cxpos - 1 }
if(highpt[1]==2){xpos = cxpos }
if(highpt[1]==3){xpos = cxpos + 1 }
if(highpt[2]==1){ypos = cypos - 1 }
if(highpt[2]==2){ypos = cypos }
if(highpt[2]==3){ypos = cypos + 1 }
}
#record new position
mvmt = c(mvmt, xpos, ypos)
#check to see if individual is at peak; if yes individual remains in same position
if(land[xpos,ypos]>=elevation[2]){
#fill out remaining positions
mvmt=c(mvmt, rep(c(xpos, ypos), (nsteps-((length(mvmt)/2)-1))))
#exit loop
break
}
#check to see if individual is at edge of landscape; if yes individual remains in same position
if(xpos>=(landscape-1) | ypos>=(landscape-1) | xpos<=1 | ypos<=1){
#fill out remaining positions
mvmt=c(mvmt, rep(c(xpos, ypos), (nsteps-((length(mvmt)/2)-1))))
#exit loop
break
}
}
return(mvmt)
}
setwd("~/GitHub/ABM_Hilltopping/")
#to make sure it is the right place you should do session then set up working directory
directory = getwd()
outdir    = paste(directory,"/output/", sep="")
source(paste(directory, "/source/FunctionSourcer.R", sep =''))
#parameters
elevation.V = c(0, 400)           #peak elevation min and max
landscape.V = 150                 #number of patches on each side, total patch number = landscape*landscape, this was given
nindvs.V    = 50                  #number of individuals to simulate
nsteps.V    = 500                 #number of steps an individual can take, this was given
move.V      = c(0.3,0.8)          #decimal likelihood of individual moving to highest neighbor patch (R&G call this q)
reps        = 2                   #number of replicates to run each model
parameters = expand.grid(elevation.V,landscape.V,nindvs.V,nsteps.V,move.V) #this creates a data frame for all of these parameters
colnames(parameters) = c("elevation","landscape","nindvs","nsteps","move")
parameters = parameters[parameters$elevation!=0,] #what is this for ?
for(p in 1:nrow(parameters)){
elevation = c(0, parameters$elevation[p])
landscape = parameters$landscape[p]
nindvs    = parameters$nindvs[p]
nsteps    = parameters$nsteps[p]
move      = parameters$move[p]
for(r in 1:reps){
#initialize landscape
land = LandscapeInit(elevation, landscape)
image(land)
#initialize individuals on landscape
pop = NewPop(nindvs, landscape)
points(pop[,1]/150, pop[,2]/150, pch=21, cex=0.5)
#plot(-100,-100, xlim=c(0,150), ylim=c(0,150))
#points(pop[,1], pop[,2], pch=19, cex=0.5)
#allow individuals to move within landscape
pathways = NULL
for(i in 1:nrow(pop)){
#isolate individual of interest
indv = pop[i,,drop=FALSE]
#chart movement
movepath = MoveIndv(indv, land, move, nsteps, elevation, landscape)
#plot movement
lines(movepath[seq(1,length(movepath), 2)]/150, movepath[seq(2,length(movepath), 2)]/150, lwd=2)
#record path in single object for all individuals
pathways = rbind(pathways, movepath)
}
rownames(pathways) = seq(1,nindvs,1)
dev.copy(png, "../output/Butter.png") #saves it to the source folder that you had everything
dev.off()
#extract needed output from simulation
#for this project it is fine to NOT do any stats, but you will want to export something (maybe a figure) so you and
#everyone can see how your model worked. we will use this to talk about approaches that worked well/did not work great.
}
}
NewPop = function(nindvs.v, landscape){
#how far apart should individuals be, at max?
variance = 25 #values is in cells
#initialize pop object
pop = matrix(nrow=nindvs.v, ncol=2)
#choose rough starting coordinates
x = sample(1:(landscape-variance), 1)
y = sample(1:(landscape-variance), 1)
#set starting locations with set variance from x,y selected above
pop[,1]  = x + rnorm(nindvs, variance)
pop[,2]  = y + rnorm(nindvs, variance)
return(pop)
}
setwd("~/GitHub/ABM_Hilltopping/")
#to make sure it is the right place you should do session then set up working directory
directory = getwd()
outdir    = paste(directory,"/output/", sep="")
source(paste(directory, "/source/FunctionSourcer.R", sep =''))
#parameters
elevation.V = c(0, 400)           #peak elevation min and max
landscape.V = 150                 #number of patches on each side, total patch number = landscape*landscape, this was given
nindvs.V    = 50                  #number of individuals to simulate
nsteps.V    = 500                 #number of steps an individual can take, this was given
move.V      = c(0.3,0.8)          #decimal likelihood of individual moving to highest neighbor patch (R&G call this q)
reps        = 2                   #number of replicates to run each model
parameters = expand.grid(elevation.V,landscape.V,nindvs.V,nsteps.V,move.V) #this creates a data frame for all of these parameters
colnames(parameters) = c("elevation","landscape","nindvs","nsteps","move")
parameters = parameters[parameters$elevation!=0,] #what is this for ?
for(p in 1:nrow(parameters)){
elevation = c(0, parameters$elevation[p])
landscape = parameters$landscape[p]
nindvs    = parameters$nindvs[p]
nsteps    = parameters$nsteps[p]
move      = parameters$move[p]
for(r in 1:reps){
#initialize landscape
land = LandscapeInit(elevation, landscape)
image(land)
#initialize individuals on landscape
pop = NewPop(nindvs, landscape)
points(pop[,1]/150, pop[,2]/150, pch=21, cex=0.5)
#plot(-100,-100, xlim=c(0,150), ylim=c(0,150))
#points(pop[,1], pop[,2], pch=19, cex=0.5)
#allow individuals to move within landscape
pathways = NULL
for(i in 1:nrow(pop)){
#isolate individual of interest
indv = pop[i,,drop=FALSE]
#chart movement
movepath = MoveIndv(indv, land, move, nsteps, elevation, landscape)
#plot movement
lines(movepath[seq(1,length(movepath), 2)]/150, movepath[seq(2,length(movepath), 2)]/150, lwd=2)
#record path in single object for all individuals
pathways = rbind(pathways, movepath)
}
rownames(pathways) = seq(1,nindvs,1)
dev.copy(png, "../output/Butter.png") #saves it to the source folder that you had everything
dev.off()
#extract needed output from simulation
#for this project it is fine to NOT do any stats, but you will want to export something (maybe a figure) so you and
#everyone can see how your model worked. we will use this to talk about approaches that worked well/did not work great.
}
}
source(paste(directory, "/source/FunctionSourcer.R", sep =''))
#parameters
elevation.V = c(0, 400)           #peak elevation min and max
landscape.V = 150                 #number of patches on each side, total patch number = landscape*landscape, this was given
numind.V    = 50                  #number of individuals to simulate
nsteps.V    = 500                 #number of steps an individual can take, this was given
move.V      = c(0.3,0.8)          #decimal likelihood of individual moving to highest neighbor patch (R&G call this q)
reps        = 2                   #number of replicates to run each model
parameters = expand.grid(elevation.V,landscape.V,nindvs.V,nsteps.V,move.V) #this creates a data frame for all of these parameters
colnames(parameters) = c("elevation","landscape","nindvs","nsteps","move")
parameters = parameters[parameters$elevation!=0,] #what is this for ?
for(p in 1:nrow(parameters)){
elevation = c(0, parameters$elevation[p])
landscape = parameters$landscape[p]
numind.V    = parameters$nindvs[p]
nsteps    = parameters$nsteps[p]
move      = parameters$move[p]
for(r in 1:reps){
#initialize landscape
land = LandscapeInit(elevation, landscape)
image(land)
#initialize individuals on landscape
pop = NewPop(nindvs, landscape)
points(pop[,1]/150, pop[,2]/150, pch=21, cex=0.5)
#plot(-100,-100, xlim=c(0,150), ylim=c(0,150))
#points(pop[,1], pop[,2], pch=19, cex=0.5)
#allow individuals to move within landscape
pathways = NULL
for(i in 1:nrow(pop)){
#isolate individual of interest
indv = pop[i,,drop=FALSE]
#chart movement
movepath = MoveIndv(indv, land, move, nsteps, elevation, landscape)
#plot movement
lines(movepath[seq(1,length(movepath), 2)]/150, movepath[seq(2,length(movepath), 2)]/150, lwd=2)
#record path in single object for all individuals
pathways = rbind(pathways, movepath)
}
rownames(pathways) = seq(1,nindvs,1)
#extract needed output from simulation
#for this project it is fine to NOT do any stats, but you will want to export something (maybe a figure) so you and
#everyone can see how your model worked. we will use this to talk about approaches that worked well/did not work great.
}
}
dev.copy(png, "../output/Butter.png") #saves it to the source folder that you had everything
dev.off()
setwd("~/GitHub/ABM_Hilltopping/")
#to make sure it is the right place you should do session then set up working directory
directory = getwd()
outdir    = paste(directory,"/output/", sep="")
source(paste(directory, "/source/FunctionSourcer.R", sep =''))
#parameters
elevation.V = c(0, 400)           #peak elevation min and max
landscape.V = 150                 #number of patches on each side, total patch number = landscape*landscape, this was given
numind.V    = 50                  #number of individuals to simulate
nsteps.V    = 500                 #number of steps an individual can take, this was given
move.V      = c(0.3,0.8)          #decimal likelihood of individual moving to highest neighbor patch (R&G call this q)
reps        = 2                   #number of replicates to run each model
parameters = expand.grid(elevation.V,landscape.V,nindvs.V,nsteps.V,move.V) #this creates a data frame for all of these parameters
colnames(parameters) = c("elevation","landscape","nindvs","nsteps","move")
parameters = parameters[parameters$elevation!=0,] #what is this for ?
for(p in 1:nrow(parameters)){
elevation = c(0, parameters$elevation[p])
landscape = parameters$landscape[p]
numind.V    = parameters$nindvs[p]
nsteps    = parameters$nsteps[p]
move      = parameters$move[p]
for(r in 1:reps){
#initialize landscape
land = LandscapeInit(elevation, landscape)
image(land)
#initialize individuals on landscape
pop = NewPop(nindvs, landscape)
points(pop[,1]/150, pop[,2]/150, pch=21, cex=0.5)
#plot(-100,-100, xlim=c(0,150), ylim=c(0,150))
#points(pop[,1], pop[,2], pch=19, cex=0.5)
#allow individuals to move within landscape
pathways = NULL
for(i in 1:nrow(pop)){
#isolate individual of interest
indv = pop[i,,drop=FALSE]
#chart movement
movepath = MoveIndv(indv, land, move, nsteps, elevation, landscape)
#plot movement
lines(movepath[seq(1,length(movepath), 2)]/150, movepath[seq(2,length(movepath), 2)]/150, lwd=2)
#record path in single object for all individuals
pathways = rbind(pathways, movepath)
}
rownames(pathways) = seq(1,nindvs,1)
dev.copy(png, "../output/Butter.png") #saves it to the source folder that you had everything
dev.off()
#extract needed output from simulation
#for this project it is fine to NOT do any stats, but you will want to export something (maybe a figure) so you and
#everyone can see how your model worked. we will use this to talk about approaches that worked well/did not work great.
}
}
setwd("~/GitHub/ABM_Hilltopping/")
#to make sure it is the right place you should do session then set up working directory
directory = getwd()
outdir    = paste(directory,"/output/", sep="")
source(paste(directory, "/source/FunctionSourcer.R", sep =''))
#parameters
elevation.V = c(0, 400)           #peak elevation min and max
landscape.V = 150                 #number of patches on each side, total patch number = landscape*landscape, this was given
numind.V    = 50                  #number of individuals to simulate
nsteps.V    = 500                 #number of steps an individual can take, this was given
move.V      = c(0.3,0.8)          #decimal likelihood of individual moving to highest neighbor patch (R&G call this q)
reps        = 2                   #number of replicates to run each model
parameters = expand.grid(elevation.V,landscape.V,nindvs.V,nsteps.V,move.V) #this creates a data frame for all of these parameters
colnames(parameters) = c("elevation","landscape","nindvs","nsteps","move")
parameters = parameters[parameters$elevation!=0,] #what is this for ?
for(p in 1:nrow(parameters)){
elevation = c(0, parameters$elevation[p])
landscape = parameters$landscape[p]
numind.V    = parameters$nindvs[p]
nsteps    = parameters$nsteps[p]
move      = parameters$move[p]
for(r in 1:reps){
#initialize landscape
land = LandscapeInit(elevation, landscape)
image(land)
#initialize individuals on landscape
pop = NewPop(nindvs, landscape)
points(pop[,1]/150, pop[,2]/150, pch=21, cex=0.5)
#plot(-100,-100, xlim=c(0,150), ylim=c(0,150))
#points(pop[,1], pop[,2], pch=19, cex=0.5)
#allow individuals to move within landscape
pathways = NULL
for(i in 1:nrow(pop)){
#isolate individual of interest
indv = pop[i,,drop=FALSE]
#chart movement
movepath = MoveIndv(indv, land, move, nsteps, elevation, landscape)
#plot movement
lines(movepath[seq(1,length(movepath), 2)]/150, movepath[seq(2,length(movepath), 2)]/150, lwd=2)
#record path in single object for all individuals
pathways = rbind(pathways, movepath)
}
rownames(pathways) = seq(1,nindvs,1)
dev.copy(png, "../output/Butter.png") #saves it to the source folder that you had everything
dev.off()
#extract needed output from simulation
#for this project it is fine to NOT do any stats, but you will want to export something (maybe a figure) so you and
#everyone can see how your model worked. we will use this to talk about approaches that worked well/did not work great.
}
}
move.V      = 0.8                 #decimal likelihood of individual moving to highest neighbor patch (R&G call this q)
reps        = 2                   #number of replicates to run each model
parameters = expand.grid(elevation.V,landscape.V,nindvs.V,nsteps.V,move.V) #this creates a data frame for all of these parameters
colnames(parameters) = c("elevation","landscape","nindvs","nsteps","move")
parameters = parameters[parameters$elevation!=0,] #what is this for ?
for(p in 1:nrow(parameters)){
elevation = c(0, parameters$elevation[p])
landscape = parameters$landscape[p]
numind.V    = parameters$nindvs[p]
nsteps    = parameters$nsteps[p]
move      = parameters$move[p]
for(r in 1:reps){
#initialize landscape
land = LandscapeInit(elevation, landscape)
image(land)
#initialize individuals on landscape
pop = NewPop(nindvs, landscape)
points(pop[,1]/150, pop[,2]/150, pch=21, cex=0.5)
#plot(-100,-100, xlim=c(0,150), ylim=c(0,150))
#points(pop[,1], pop[,2], pch=19, cex=0.5)
#allow individuals to move within landscape
pathways = NULL
for(i in 1:nrow(pop)){
#isolate individual of interest
indv = pop[i,,drop=FALSE]
#chart movement
movepath = MoveIndv(indv, land, move, nsteps, elevation, landscape)
#plot movement
lines(movepath[seq(1,length(movepath), 2)]/150, movepath[seq(2,length(movepath), 2)]/150, lwd=2)
#record path in single object for all individuals
pathways = rbind(pathways, movepath)
}
rownames(pathways) = seq(1,nindvs,1)
dev.copy(png, "../output/Butter.png") #saves it to the source folder that you had everything
dev.off()
#extract needed output from simulation
#for this project it is fine to NOT do any stats, but you will want to export something (maybe a figure) so you and
#everyone can see how your model worked. we will use this to talk about approaches that worked well/did not work great.
}
}
setwd("~/GitHub/ABM_Hilltopping/")
#to make sure it is the right place you should do session then set up working directory
directory = getwd()
outdir    = paste(directory,"/output/", sep="")
source(paste(directory, "/source/FunctionSourcer.R", sep =''))
#parameters
elevation.V = c(0, 400)           #peak elevation min and max
landscape.V = 150                 #number of patches on each side, total patch number = landscape*landscape, this was given
numind.V    = 50                  #number of individuals to simulate
nsteps.V    = 500                 #number of steps an individual can take, this was given
move.V      = 0.8                 #decimal likelihood of individual moving to highest neighbor patch (R&G call this q)
reps        = 2                   #number of replicates to run
parameters = expand.grid(elevation.V,landscape.V,nindvs.V,nsteps.V,move.V) #this creates a data frame for all of these parameters
colnames(parameters) = c("elevation","landscape","numind","nsteps","move")
parameters = parameters[parameters$elevation!=0,] #what is this for ?
for(p in 1:nrow(parameters)){
elevation = c(0, parameters$elevation[p])
landscape = parameters$landscape[p]
numind    = parameters$nindvs[p]
nsteps    = parameters$nsteps[p]
move      = parameters$move[p]
for(r in 1:reps){
#initialize landscape
land = LandscapeInit(elevation, landscape)
image(land)
#initialize individuals on landscape
pop = NPop(nindvs, landscape)
points(pop[,1]/150, pop[,2]/150, pch=21, cex=0.5)
#allow individuals to move within landscape
pathways = NULL
for(i in 1:nrow(pop)){
#isolate individual of interest
indv = pop[i,,drop=FALSE]
#chart movement
movepath = MoveIndv(numind, land, move, nsteps, elevation, landscape)
#plot movement
lines(movepath[seq(1,length(movepath), 2)]/150, movepath[seq(2,length(movepath), 2)]/150, lwd=2)
#record path in single object for all individuals
pathways = rbind(pathways, movepath)
}
rownames(pathways) = seq(1,nindvs,1)
dev.copy(png, "../output/Butter.png") #saves it to the source folder that you had everything
dev.off()
#extract needed output from simulation
#for this project it is fine to NOT do any stats, but you will want to export something (maybe a figure) so you and
#everyone can see how your model worked. we will use this to talk about approaches that worked well/did not work great.
}
}
setwd("~/GitHub/ABM_Hilltopping/")
#to make sure it is the right place you should do session then set up working directory
directory = getwd()
outdir    = paste(directory,"/output/", sep="")
source(paste(directory, "/source/FunctionSourcer.R", sep =''))
#parameters
elevation.V = c(0, 400)           #peak elevation min and max
landscape.V = 150                 #number of patches on each side, total patch number = landscape*landscape, this was given
numind.V    = 50                  #number of individuals to simulate
nsteps.V    = 500                 #number of steps an individual can take, this was given
move.V      = 0.8                 #decimal likelihood of individual moving to highest neighbor patch (R&G call this q)
reps        = 2                   #number of replicates to run
parameters = expand.grid(elevation.V,landscape.V,nindvs.V,nsteps.V,move.V) #this creates a data frame for all of these parameters
colnames(parameters) = c("elevation","landscape","numind","nsteps","move")
parameters = parameters[parameters$elevation!=0,] #what is this for ?
for(p in 1:nrow(parameters)){
elevation = c(0, parameters$elevation[p])
landscape = parameters$landscape[p]
numind    = parameters$nindvs[p]
nsteps    = parameters$nsteps[p]
move      = parameters$move[p]
for(r in 1:reps){
#initialize landscape
land = LandscapeInit(elevation, landscape)
image(land)
#initialize individuals on landscape
pop = NPop(nindvs, landscape)
points(pop[,1]/150, pop[,2]/150, pch=21, cex=0.5)
#allow individuals to move within landscape
pathways = NULL
for(i in 1:nrow(pop)){
#isolate individual of interest
indv = pop[i,,drop=FALSE]
#chart movement
movepath = MoveIndv(numind, land, move, nsteps, elevation, landscape)
#plot movement
lines(movepath[seq(1,length(movepath), 2)]/150, movepath[seq(2,length(movepath), 2)]/150, lwd=2)
#record path in single object for all individuals
pathways = rbind(pathways, movepath)
}
rownames(pathways) = seq(1,nindvs,1)
dev.copy(png, "../output/Butter.png") #saves it to the source folder that you had everything
dev.off()
#extract needed output from simulation
#for this project it is fine to NOT do any stats, but you will want to export something (maybe a figure) so you and
#everyone can see how your model worked. we will use this to talk about approaches that worked well/did not work great.
}
}
